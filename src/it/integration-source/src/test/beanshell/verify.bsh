import org.hamcrest.Matcher;
import org.hamcrest.Matchers;

import com.overstock.constraint.test.FileAssert;

String localBasedir = basedir.getPath().split("../integration-source")[0];
File buildLog = new File(localBasedir, "build.log");
FileAssert.assertFileMatches(buildLog, new Matcher[] {
  Matchers.containsString("Class companionannotations.RequireUnconstrainedFail is annotated with @RequireUnconstrained but not with @Unconstrained"),
  Matchers.containsString("Class companionannotations.RequireMultipleFailOne is annotated with @RequireMultiple but not with @Unconstrained"),
  Matchers.containsString("Class companionannotations.RequireMultipleFailAll is annotated with @RequireMultiple but not with @Unconstrained"),
  //TODO javac only reports the first error for the class Matchers.containsString("Class companionannotations.RequireMultipleFailAll is annotated with @RequireMultiple but not with @RequireNoArgConstructor"),
  Matchers.containsString("Class companionannotations.RecommendUnconstrainedFail is annotated with @RecommendUnconstrained but not with @Unconstrained"),
  Matchers.containsString("Class companionannotations.RecommendMultipleFailOne is annotated with @RecommendMultiple but not with @Unconstrained"),
  Matchers.containsString("Class companionannotations.RecommendMultipleFailAll is annotated with @RecommendMultiple but not with @Unconstrained"),
  Matchers.containsString("Class companionannotations.RecommendMultipleFailAll is annotated with @RecommendMultiple but not with @RequireNoArgConstructor"),
  Matchers.containsString("Class disallowannotations.DisallowUnconstrainedFail is annotated with @DisallowUnconstrained which is not allowed with @Unconstrained"),
  Matchers.containsString("Class disallowannotations.DisallowMultipleFailOne is annotated with @DisallowMultiple which is not allowed with @Unconstrained"),
  Matchers.containsString("Class disallowannotations.DisallowMultipleFailAll is annotated with @DisallowMultiple which is not allowed with @Unconstrained"),
  //TODO javac only reports the first error for the class Matchers.containsString("Class disallowannotations.DisallowMultipleFailAll is annotated with @DisallowMultiple which is not allowed with @RequireNoArgConstructor"),
  Matchers.containsString("Class example.Person is annotated with @Model but does not have a constructor with no arguments"),
  //TODO javac only reports the first error for the class Matchers.containsString("Class example.Person is annotated with @Model but does not have example.AbstractModel as a supertype"),
  Matchers.containsString("Class requireannotationsonsupertype.RequireAnnotationsOnSupertypeFail is annotated with @RequireUnconstrainedSupertype but does not have a supertype annotated with @Unconstrained"),
  //TODO javac only reports the first error for the class Matchers.containsString("Class requireannotationsonsupertype.RequireAnnotationsOnSupertypeFail is annotated with @RequireUnconstrainedSupertype but does not have a supertype annotated with @RequireUnconstrained"),
  Matchers.containsString("Class requireconstructors.RequireNoArgConstructorFail is annotated with @RequireNoArgConstructor but does not have a constructor with no arguments"),
  Matchers.containsString("Class requireconstructors.RequireStringLongIntArrayConstructorFail is annotated with @RequireStringLongIntArrayConstructor but does not have a constructor with arguments (java.lang.String, long, int[])"),
  Matchers.containsString("Class requiresupertypes.RequireSupertypesFail is annotated with @RequireBaseClassAndSerializable but does not have requiresupertypes.BaseClass as a supertype"),
  //TODO javac only reports the first error for the class Matchers.containsString("Class requiresupertypes.RequireSupertypesFail is annotated with @RequireBaseClassAndSerializable but does not have java.io.Serializable as a supertype"),
  Matchers.containsString("Class verifier.VerifierSubclassFail is annotated with @ServiceProvider but does not have a constructor with no arguments"),
  Matchers.containsString("Failing CustomVerifyFail.class from a custom verifier"),
  Matchers.containsString("Class provider.ExternalProviderFail is annotated with @Entity but does not have a constructor with no arguments as specified by provider.ExternalProvider"),
  Matchers.containsString("Class provider.InternalProviderFail is annotated with @Table but not with @Entity as specified by provider.InternalProvider"),
  Matchers.not(Matchers.containsString("Pass")) //naming convention for classes which should compile cleanly
});